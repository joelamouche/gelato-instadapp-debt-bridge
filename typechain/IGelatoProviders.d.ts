/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IGelatoProvidersInterface extends Interface {
  functions: {
    NO_CEIL: TypedFunctionDescription<{ encode([]: []): string }>;

    addProviderModules: TypedFunctionDescription<{
      encode([_modules]: [string[]]): string;
    }>;

    executorAssignsExecutor: TypedFunctionDescription<{
      encode([_provider, _newExecutor]: [string, string]): string;
    }>;

    executorByProvider: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;

    executorProvidersCount: TypedFunctionDescription<{
      encode([_executor]: [string]): string;
    }>;

    executorStake: TypedFunctionDescription<{
      encode([_executor]: [string]): string;
    }>;

    hashTaskSpec: TypedFunctionDescription<{
      encode([_taskSpec]: [
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }
      ]): string;
    }>;

    isExecutorAssigned: TypedFunctionDescription<{
      encode([_executor]: [string]): string;
    }>;

    isExecutorMinStaked: TypedFunctionDescription<{
      encode([_executor]: [string]): string;
    }>;

    isModuleProvided: TypedFunctionDescription<{
      encode([_provider, _module]: [string, string]): string;
    }>;

    isProviderLiquid: TypedFunctionDescription<{
      encode([_provider, _gelatoMaxGas, _gelatoGasPrice]: [
        string,
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    isTaskProvided: TypedFunctionDescription<{
      encode([_userProxy, _provider, _task]: [
        string,
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }
      ]): string;
    }>;

    isTaskSpecProvided: TypedFunctionDescription<{
      encode([_provider, _taskSpec]: [
        string,
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }
      ]): string;
    }>;

    minExecProviderFunds: TypedFunctionDescription<{
      encode([_gelatoMaxGas, _gelatoGasPrice]: [
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    multiProvide: TypedFunctionDescription<{
      encode([_executor, _taskSpecs, _modules]: [
        string,
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }[],
        string[]
      ]): string;
    }>;

    multiUnprovide: TypedFunctionDescription<{
      encode([_withdrawAmount, _taskSpecs, _modules]: [
        BigNumberish,
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }[],
        string[]
      ]): string;
    }>;

    provideFunds: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;

    provideTaskSpecs: TypedFunctionDescription<{
      encode([_taskSpecs]: [
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }[]
      ]): string;
    }>;

    providerAssignsExecutor: TypedFunctionDescription<{
      encode([_executor]: [string]): string;
    }>;

    providerCanExec: TypedFunctionDescription<{
      encode([_userProxy, _provider, _task, _gelatoGasPrice]: [
        string,
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        },
        BigNumberish
      ]): string;
    }>;

    providerFunds: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;

    providerModuleChecks: TypedFunctionDescription<{
      encode([_userProxy, _provider, _task]: [
        string,
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }
      ]): string;
    }>;

    providerModules: TypedFunctionDescription<{
      encode([_provider]: [string]): string;
    }>;

    removeProviderModules: TypedFunctionDescription<{
      encode([_modules]: [string[]]): string;
    }>;

    setTaskSpecGasPriceCeil: TypedFunctionDescription<{
      encode([_taskSpecHash, _gasPriceCeil]: [Arrayish, BigNumberish]): string;
    }>;

    taskSpecGasPriceCeil: TypedFunctionDescription<{
      encode([_provider, _taskSpecHash]: [string, Arrayish]): string;
    }>;

    unprovideFunds: TypedFunctionDescription<{
      encode([_withdrawAmount]: [BigNumberish]): string;
    }>;

    unprovideTaskSpecs: TypedFunctionDescription<{
      encode([_taskSpecs]: [
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }[]
      ]): string;
    }>;
  };

  events: {
    LogExecutorAssignedExecutor: TypedEventDescription<{
      encodeTopics([provider, oldExecutor, newExecutor]: [
        string | null,
        string | null,
        string | null
      ]): string[];
    }>;

    LogFundsProvided: TypedEventDescription<{
      encodeTopics([provider, amount, newProviderFunds]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    LogFundsUnprovided: TypedEventDescription<{
      encodeTopics([provider, realWithdrawAmount, newProviderFunds]: [
        string | null,
        null,
        null
      ]): string[];
    }>;

    LogProviderAssignedExecutor: TypedEventDescription<{
      encodeTopics([provider, oldExecutor, newExecutor]: [
        string | null,
        string | null,
        string | null
      ]): string[];
    }>;

    LogProviderModuleAdded: TypedEventDescription<{
      encodeTopics([provider, module]: [
        string | null,
        string | null
      ]): string[];
    }>;

    LogProviderModuleRemoved: TypedEventDescription<{
      encodeTopics([provider, module]: [
        string | null,
        string | null
      ]): string[];
    }>;

    LogTaskSpecGasPriceCeilSet: TypedEventDescription<{
      encodeTopics([
        provider,
        taskSpecHash,
        oldTaskSpecGasPriceCeil,
        newTaskSpecGasPriceCeil
      ]: [string | null, null, null, null]): string[];
    }>;

    LogTaskSpecProvided: TypedEventDescription<{
      encodeTopics([provider, taskSpecHash]: [
        string | null,
        Arrayish | null
      ]): string[];
    }>;

    LogTaskSpecUnprovided: TypedEventDescription<{
      encodeTopics([provider, taskSpecHash]: [
        string | null,
        Arrayish | null
      ]): string[];
    }>;
  };
}

export class IGelatoProviders extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IGelatoProviders;
  attach(addressOrName: string): IGelatoProviders;
  deployed(): Promise<IGelatoProviders>;

  on(event: EventFilter | string, listener: Listener): IGelatoProviders;
  once(event: EventFilter | string, listener: Listener): IGelatoProviders;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IGelatoProviders;
  removeAllListeners(eventName: EventFilter | string): IGelatoProviders;
  removeListener(eventName: any, listener: Listener): IGelatoProviders;

  interface: IGelatoProvidersInterface;

  functions: {
    NO_CEIL(overrides?: TransactionOverrides): Promise<BigNumber>;

    "NO_CEIL()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    addProviderModules(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "addProviderModules(address[])"(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executorAssignsExecutor(
      _provider: string,
      _newExecutor: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "executorAssignsExecutor(address,address)"(
      _provider: string,
      _newExecutor: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    executorByProvider(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "executorByProvider(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<string>;

    executorProvidersCount(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executorProvidersCount(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    executorStake(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executorStake(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hashTaskSpec(
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    "hashTaskSpec(tuple)"(
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    isExecutorAssigned(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isExecutorAssigned(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    isExecutorMinStaked(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isExecutorMinStaked(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    isModuleProvided(
      _provider: string,
      _module: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isModuleProvided(address,address)"(
      _provider: string,
      _module: string,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    "isProviderLiquid(address,uint256,uint256)"(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<boolean>;

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    "isTaskProvided(address,tuple,tuple)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    "isTaskSpecProvided(address,tuple)"(
      _provider: string,
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "minExecProviderFunds(uint256,uint256)"(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multiProvide(address,tuple[],address[])"(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multiUnprovide(uint256,tuple[],address[])"(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    provideFunds(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "provideFunds(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "provideTaskSpecs(tuple[])"(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    providerAssignsExecutor(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "providerAssignsExecutor(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "providerCanExec(address,tuple,tuple,uint256)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    providerFunds(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "providerFunds(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    "providerModuleChecks(address,tuple,tuple)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    providerModules(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    "providerModules(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<string[]>;

    removeProviderModules(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "removeProviderModules(address[])"(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setTaskSpecGasPriceCeil(
      _taskSpecHash: Arrayish,
      _gasPriceCeil: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setTaskSpecGasPriceCeil(bytes32,uint256)"(
      _taskSpecHash: Arrayish,
      _gasPriceCeil: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    taskSpecGasPriceCeil(
      _provider: string,
      _taskSpecHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "taskSpecGasPriceCeil(address,bytes32)"(
      _provider: string,
      _taskSpecHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    unprovideFunds(
      _withdrawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "unprovideFunds(uint256)"(
      _withdrawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "unprovideTaskSpecs(tuple[])"(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  NO_CEIL(overrides?: TransactionOverrides): Promise<BigNumber>;

  "NO_CEIL()"(overrides?: TransactionOverrides): Promise<BigNumber>;

  addProviderModules(
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "addProviderModules(address[])"(
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executorAssignsExecutor(
    _provider: string,
    _newExecutor: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "executorAssignsExecutor(address,address)"(
    _provider: string,
    _newExecutor: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  executorByProvider(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "executorByProvider(address)"(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<string>;

  executorProvidersCount(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "executorProvidersCount(address)"(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  executorStake(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "executorStake(address)"(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  hashTaskSpec(
    _taskSpec: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  "hashTaskSpec(tuple)"(
    _taskSpec: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  isExecutorAssigned(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isExecutorAssigned(address)"(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  isExecutorMinStaked(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isExecutorMinStaked(address)"(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  isModuleProvided(
    _provider: string,
    _module: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isModuleProvided(address,address)"(
    _provider: string,
    _module: string,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  isProviderLiquid(
    _provider: string,
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  "isProviderLiquid(address,uint256,uint256)"(
    _provider: string,
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<boolean>;

  isTaskProvided(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  "isTaskProvided(address,tuple,tuple)"(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  isTaskSpecProvided(
    _provider: string,
    _taskSpec: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  "isTaskSpecProvided(address,tuple)"(
    _provider: string,
    _taskSpec: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  minExecProviderFunds(
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "minExecProviderFunds(uint256,uint256)"(
    _gelatoMaxGas: BigNumberish,
    _gelatoGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  multiProvide(
    _executor: string,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multiProvide(address,tuple[],address[])"(
    _executor: string,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multiUnprovide(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multiUnprovide(uint256,tuple[],address[])"(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  provideFunds(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "provideFunds(address)"(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  provideTaskSpecs(
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "provideTaskSpecs(tuple[])"(
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  providerAssignsExecutor(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "providerAssignsExecutor(address)"(
    _executor: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  providerCanExec(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _gelatoGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "providerCanExec(address,tuple,tuple,uint256)"(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _gelatoGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  providerFunds(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "providerFunds(address)"(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  providerModuleChecks(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  "providerModuleChecks(address,tuple,tuple)"(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  providerModules(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  "providerModules(address)"(
    _provider: string,
    overrides?: TransactionOverrides
  ): Promise<string[]>;

  removeProviderModules(
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "removeProviderModules(address[])"(
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setTaskSpecGasPriceCeil(
    _taskSpecHash: Arrayish,
    _gasPriceCeil: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setTaskSpecGasPriceCeil(bytes32,uint256)"(
    _taskSpecHash: Arrayish,
    _gasPriceCeil: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  taskSpecGasPriceCeil(
    _provider: string,
    _taskSpecHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  "taskSpecGasPriceCeil(address,bytes32)"(
    _provider: string,
    _taskSpecHash: Arrayish,
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  unprovideFunds(
    _withdrawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "unprovideFunds(uint256)"(
    _withdrawAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  unprovideTaskSpecs(
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "unprovideTaskSpecs(tuple[])"(
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    LogExecutorAssignedExecutor(
      provider: string | null,
      oldExecutor: string | null,
      newExecutor: string | null
    ): EventFilter;

    LogFundsProvided(
      provider: string | null,
      amount: null,
      newProviderFunds: null
    ): EventFilter;

    LogFundsUnprovided(
      provider: string | null,
      realWithdrawAmount: null,
      newProviderFunds: null
    ): EventFilter;

    LogProviderAssignedExecutor(
      provider: string | null,
      oldExecutor: string | null,
      newExecutor: string | null
    ): EventFilter;

    LogProviderModuleAdded(
      provider: string | null,
      module: string | null
    ): EventFilter;

    LogProviderModuleRemoved(
      provider: string | null,
      module: string | null
    ): EventFilter;

    LogTaskSpecGasPriceCeilSet(
      provider: string | null,
      taskSpecHash: null,
      oldTaskSpecGasPriceCeil: null,
      newTaskSpecGasPriceCeil: null
    ): EventFilter;

    LogTaskSpecProvided(
      provider: string | null,
      taskSpecHash: Arrayish | null
    ): EventFilter;

    LogTaskSpecUnprovided(
      provider: string | null,
      taskSpecHash: Arrayish | null
    ): EventFilter;
  };

  estimate: {
    NO_CEIL(overrides?: TransactionOverrides): Promise<BigNumber>;

    "NO_CEIL()"(overrides?: TransactionOverrides): Promise<BigNumber>;

    addProviderModules(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "addProviderModules(address[])"(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    executorAssignsExecutor(
      _provider: string,
      _newExecutor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executorAssignsExecutor(address,address)"(
      _provider: string,
      _newExecutor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    executorByProvider(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executorByProvider(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    executorProvidersCount(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executorProvidersCount(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    executorStake(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "executorStake(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hashTaskSpec(
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hashTaskSpec(tuple)"(
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isExecutorAssigned(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isExecutorAssigned(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isExecutorMinStaked(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isExecutorMinStaked(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isModuleProvided(
      _provider: string,
      _module: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isModuleProvided(address,address)"(
      _provider: string,
      _module: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isProviderLiquid(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isProviderLiquid(address,uint256,uint256)"(
      _provider: string,
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isTaskProvided(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isTaskProvided(address,tuple,tuple)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    isTaskSpecProvided(
      _provider: string,
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "isTaskSpecProvided(address,tuple)"(
      _provider: string,
      _taskSpec: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    minExecProviderFunds(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "minExecProviderFunds(uint256,uint256)"(
      _gelatoMaxGas: BigNumberish,
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multiProvide(address,tuple[],address[])"(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multiUnprovide(uint256,tuple[],address[])"(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    provideFunds(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "provideFunds(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    provideTaskSpecs(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "provideTaskSpecs(tuple[])"(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    providerAssignsExecutor(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "providerAssignsExecutor(address)"(
      _executor: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    providerCanExec(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "providerCanExec(address,tuple,tuple,uint256)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _gelatoGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    providerFunds(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "providerFunds(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    providerModuleChecks(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "providerModuleChecks(address,tuple,tuple)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    providerModules(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "providerModules(address)"(
      _provider: string,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    removeProviderModules(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "removeProviderModules(address[])"(
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setTaskSpecGasPriceCeil(
      _taskSpecHash: Arrayish,
      _gasPriceCeil: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setTaskSpecGasPriceCeil(bytes32,uint256)"(
      _taskSpecHash: Arrayish,
      _gasPriceCeil: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    taskSpecGasPriceCeil(
      _provider: string,
      _taskSpecHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "taskSpecGasPriceCeil(address,bytes32)"(
      _provider: string,
      _taskSpecHash: Arrayish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    unprovideFunds(
      _withdrawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "unprovideFunds(uint256)"(
      _withdrawAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    unprovideTaskSpecs(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "unprovideTaskSpecs(tuple[])"(
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
