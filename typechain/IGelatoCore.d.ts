/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IGelatoCoreInterface extends Interface {
  functions: {
    canExec: TypedFunctionDescription<{
      encode([_TR, _gasLimit, _execTxGasPrice]: [
        {
          id: BigNumberish;
          userProxy: string;
          provider: { addr: string; module: string };
          index: BigNumberish;
          tasks: {
            conditions: { inst: string; data: Arrayish }[];
            actions: {
              addr: string;
              data: Arrayish;
              operation: BigNumberish;
              dataFlow: BigNumberish;
              value: BigNumberish;
              termsOkCheck: boolean;
            }[];
            selfProviderGasLimit: BigNumberish;
            selfProviderGasPriceCeil: BigNumberish;
          }[];
          expiryDate: BigNumberish;
          cycleId: BigNumberish;
          submissionsLeft: BigNumberish;
        },
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    canSubmitTask: TypedFunctionDescription<{
      encode([_userProxy, _provider, _task, _expiryDate]: [
        string,
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        },
        BigNumberish
      ]): string;
    }>;

    cancelTask: TypedFunctionDescription<{
      encode([_TR]: [
        {
          id: BigNumberish;
          userProxy: string;
          provider: { addr: string; module: string };
          index: BigNumberish;
          tasks: {
            conditions: { inst: string; data: Arrayish }[];
            actions: {
              addr: string;
              data: Arrayish;
              operation: BigNumberish;
              dataFlow: BigNumberish;
              value: BigNumberish;
              termsOkCheck: boolean;
            }[];
            selfProviderGasLimit: BigNumberish;
            selfProviderGasPriceCeil: BigNumberish;
          }[];
          expiryDate: BigNumberish;
          cycleId: BigNumberish;
          submissionsLeft: BigNumberish;
        }
      ]): string;
    }>;

    currentTaskReceiptId: TypedFunctionDescription<{ encode([]: []): string }>;

    exec: TypedFunctionDescription<{
      encode([_TR]: [
        {
          id: BigNumberish;
          userProxy: string;
          provider: { addr: string; module: string };
          index: BigNumberish;
          tasks: {
            conditions: { inst: string; data: Arrayish }[];
            actions: {
              addr: string;
              data: Arrayish;
              operation: BigNumberish;
              dataFlow: BigNumberish;
              value: BigNumberish;
              termsOkCheck: boolean;
            }[];
            selfProviderGasLimit: BigNumberish;
            selfProviderGasPriceCeil: BigNumberish;
          }[];
          expiryDate: BigNumberish;
          cycleId: BigNumberish;
          submissionsLeft: BigNumberish;
        }
      ]): string;
    }>;

    hashTaskReceipt: TypedFunctionDescription<{
      encode([_TR]: [
        {
          id: BigNumberish;
          userProxy: string;
          provider: { addr: string; module: string };
          index: BigNumberish;
          tasks: {
            conditions: { inst: string; data: Arrayish }[];
            actions: {
              addr: string;
              data: Arrayish;
              operation: BigNumberish;
              dataFlow: BigNumberish;
              value: BigNumberish;
              termsOkCheck: boolean;
            }[];
            selfProviderGasLimit: BigNumberish;
            selfProviderGasPriceCeil: BigNumberish;
          }[];
          expiryDate: BigNumberish;
          cycleId: BigNumberish;
          submissionsLeft: BigNumberish;
        }
      ]): string;
    }>;

    multiCancelTasks: TypedFunctionDescription<{
      encode([_taskReceipts]: [
        {
          id: BigNumberish;
          userProxy: string;
          provider: { addr: string; module: string };
          index: BigNumberish;
          tasks: {
            conditions: { inst: string; data: Arrayish }[];
            actions: {
              addr: string;
              data: Arrayish;
              operation: BigNumberish;
              dataFlow: BigNumberish;
              value: BigNumberish;
              termsOkCheck: boolean;
            }[];
            selfProviderGasLimit: BigNumberish;
            selfProviderGasPriceCeil: BigNumberish;
          }[];
          expiryDate: BigNumberish;
          cycleId: BigNumberish;
          submissionsLeft: BigNumberish;
        }[]
      ]): string;
    }>;

    submitTask: TypedFunctionDescription<{
      encode([_provider, _task, _expiryDate]: [
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        },
        BigNumberish
      ]): string;
    }>;

    submitTaskChain: TypedFunctionDescription<{
      encode([_provider, _tasks, _expiryDate, _sumOfRequestedTaskSubmits]: [
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    submitTaskCycle: TypedFunctionDescription<{
      encode([_provider, _tasks, _expiryDate, _cycles]: [
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    taskReceiptHash: TypedFunctionDescription<{
      encode([_taskReceiptId]: [BigNumberish]): string;
    }>;
  };

  events: {
    LogCanExecFailed: TypedEventDescription<{
      encodeTopics([executor, taskReceiptId, reason]: [
        string | null,
        BigNumberish | null,
        null
      ]): string[];
    }>;

    LogExecReverted: TypedEventDescription<{
      encodeTopics([executor, taskReceiptId, executorRefund, reason]: [
        string | null,
        BigNumberish | null,
        null,
        null
      ]): string[];
    }>;

    LogExecSuccess: TypedEventDescription<{
      encodeTopics([
        executor,
        taskReceiptId,
        executorSuccessFee,
        sysAdminSuccessFee
      ]: [string | null, BigNumberish | null, null, null]): string[];
    }>;

    LogTaskCancelled: TypedEventDescription<{
      encodeTopics([taskReceiptId, cancellor]: [
        BigNumberish | null,
        string | null
      ]): string[];
    }>;

    LogTaskSubmitted: TypedEventDescription<{
      encodeTopics([taskReceiptId, taskReceiptHash, taskReceipt]: [
        BigNumberish | null,
        Arrayish | null,
        null
      ]): string[];
    }>;
  };
}

export class IGelatoCore extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IGelatoCore;
  attach(addressOrName: string): IGelatoCore;
  deployed(): Promise<IGelatoCore>;

  on(event: EventFilter | string, listener: Listener): IGelatoCore;
  once(event: EventFilter | string, listener: Listener): IGelatoCore;
  addListener(eventName: EventFilter | string, listener: Listener): IGelatoCore;
  removeAllListeners(eventName: EventFilter | string): IGelatoCore;
  removeListener(eventName: any, listener: Listener): IGelatoCore;

  interface: IGelatoCoreInterface;

  functions: {
    canExec(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "canExec(tuple,uint256,uint256)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "canSubmitTask(address,tuple,tuple,uint256)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    cancelTask(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "cancelTask(tuple)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    currentTaskReceiptId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentTaskReceiptId()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    exec(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "exec(tuple)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    hashTaskReceipt(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    "hashTaskReceipt(tuple)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<string>;

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multiCancelTasks(tuple[])"(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitTask(tuple,tuple,uint256)"(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitTaskChain(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitTaskCycle(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    taskReceiptHash(
      _taskReceiptId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;

    "taskReceiptHash(uint256)"(
      _taskReceiptId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<string>;
  };

  canExec(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    _gasLimit: BigNumberish,
    _execTxGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "canExec(tuple,uint256,uint256)"(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    _gasLimit: BigNumberish,
    _execTxGasPrice: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  canSubmitTask(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _expiryDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "canSubmitTask(address,tuple,tuple,uint256)"(
    _userProxy: string,
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _expiryDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  cancelTask(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "cancelTask(tuple)"(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  currentTaskReceiptId(overrides?: TransactionOverrides): Promise<BigNumber>;

  "currentTaskReceiptId()"(
    overrides?: TransactionOverrides
  ): Promise<BigNumber>;

  exec(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "exec(tuple)"(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  hashTaskReceipt(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  "hashTaskReceipt(tuple)"(
    _TR: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    },
    overrides?: TransactionOverrides
  ): Promise<string>;

  multiCancelTasks(
    _taskReceipts: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multiCancelTasks(tuple[])"(
    _taskReceipts: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTask(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _expiryDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitTask(tuple,tuple,uint256)"(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _expiryDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTaskChain(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitTaskChain(tuple,tuple[],uint256,uint256)"(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTaskCycle(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitTaskCycle(tuple,tuple[],uint256,uint256)"(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  taskReceiptHash(
    _taskReceiptId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  "taskReceiptHash(uint256)"(
    _taskReceiptId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<string>;

  filters: {
    LogCanExecFailed(
      executor: string | null,
      taskReceiptId: BigNumberish | null,
      reason: null
    ): EventFilter;

    LogExecReverted(
      executor: string | null,
      taskReceiptId: BigNumberish | null,
      executorRefund: null,
      reason: null
    ): EventFilter;

    LogExecSuccess(
      executor: string | null,
      taskReceiptId: BigNumberish | null,
      executorSuccessFee: null,
      sysAdminSuccessFee: null
    ): EventFilter;

    LogTaskCancelled(
      taskReceiptId: BigNumberish | null,
      cancellor: string | null
    ): EventFilter;

    LogTaskSubmitted(
      taskReceiptId: BigNumberish | null,
      taskReceiptHash: Arrayish | null,
      taskReceipt: null
    ): EventFilter;
  };

  estimate: {
    canExec(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "canExec(tuple,uint256,uint256)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      _gasLimit: BigNumberish,
      _execTxGasPrice: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    canSubmitTask(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "canSubmitTask(address,tuple,tuple,uint256)"(
      _userProxy: string,
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    cancelTask(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "cancelTask(tuple)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    currentTaskReceiptId(overrides?: TransactionOverrides): Promise<BigNumber>;

    "currentTaskReceiptId()"(
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    exec(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "exec(tuple)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    hashTaskReceipt(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "hashTaskReceipt(tuple)"(
      _TR: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      },
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multiCancelTasks(tuple[])"(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitTask(tuple,tuple,uint256)"(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitTaskChain(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitTaskCycle(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    taskReceiptHash(
      _taskReceiptId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "taskReceiptHash(uint256)"(
      _taskReceiptId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
