/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MemoryInterfaceInterface extends Interface {
  functions: {
    getUint: TypedFunctionDescription<{ encode([id]: [BigNumberish]): string }>;

    setUint: TypedFunctionDescription<{
      encode([id, val]: [BigNumberish, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class MemoryInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MemoryInterface;
  attach(addressOrName: string): MemoryInterface;
  deployed(): Promise<MemoryInterface>;

  on(event: EventFilter | string, listener: Listener): MemoryInterface;
  once(event: EventFilter | string, listener: Listener): MemoryInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MemoryInterface;
  removeAllListeners(eventName: EventFilter | string): MemoryInterface;
  removeListener(eventName: any, listener: Listener): MemoryInterface;

  interface: MemoryInterfaceInterface;

  functions: {
    getUint(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "getUint(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setUint(
      id: BigNumberish,
      val: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "setUint(uint256,uint256)"(
      id: BigNumberish,
      val: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  getUint(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "getUint(uint256)"(
    id: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setUint(
    id: BigNumberish,
    val: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "setUint(uint256,uint256)"(
    id: BigNumberish,
    val: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    getUint(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "getUint(uint256)"(
      id: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    setUint(
      id: BigNumberish,
      val: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "setUint(uint256,uint256)"(
      id: BigNumberish,
      val: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
