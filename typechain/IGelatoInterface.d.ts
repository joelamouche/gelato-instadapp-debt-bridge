/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface IGelatoInterfaceInterface extends Interface {
  functions: {
    multiCancelTasks: TypedFunctionDescription<{
      encode([_taskReceipts]: [
        {
          id: BigNumberish;
          userProxy: string;
          provider: { addr: string; module: string };
          index: BigNumberish;
          tasks: {
            conditions: { inst: string; data: Arrayish }[];
            actions: {
              addr: string;
              data: Arrayish;
              operation: BigNumberish;
              dataFlow: BigNumberish;
              value: BigNumberish;
              termsOkCheck: boolean;
            }[];
            selfProviderGasLimit: BigNumberish;
            selfProviderGasPriceCeil: BigNumberish;
          }[];
          expiryDate: BigNumberish;
          cycleId: BigNumberish;
          submissionsLeft: BigNumberish;
        }[]
      ]): string;
    }>;

    multiProvide: TypedFunctionDescription<{
      encode([_executor, _taskSpecs, _modules]: [
        string,
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }[],
        string[]
      ]): string;
    }>;

    multiUnprovide: TypedFunctionDescription<{
      encode([_withdrawAmount, _taskSpecs, _modules]: [
        BigNumberish,
        {
          conditions: string[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          gasPriceCeil: BigNumberish;
        }[],
        string[]
      ]): string;
    }>;

    submitTask: TypedFunctionDescription<{
      encode([_provider, _task, _expiryDate]: [
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        },
        BigNumberish
      ]): string;
    }>;

    submitTaskChain: TypedFunctionDescription<{
      encode([_provider, _tasks, _expiryDate, _sumOfRequestedTaskSubmits]: [
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;

    submitTaskCycle: TypedFunctionDescription<{
      encode([_provider, _tasks, _expiryDate, _cycles]: [
        { addr: string; module: string },
        {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[],
        BigNumberish,
        BigNumberish
      ]): string;
    }>;
  };

  events: {};
}

export class IGelatoInterface extends Contract {
  connect(signerOrProvider: Signer | Provider | string): IGelatoInterface;
  attach(addressOrName: string): IGelatoInterface;
  deployed(): Promise<IGelatoInterface>;

  on(event: EventFilter | string, listener: Listener): IGelatoInterface;
  once(event: EventFilter | string, listener: Listener): IGelatoInterface;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): IGelatoInterface;
  removeAllListeners(eventName: EventFilter | string): IGelatoInterface;
  removeListener(eventName: any, listener: Listener): IGelatoInterface;

  interface: IGelatoInterfaceInterface;

  functions: {
    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multiCancelTasks(tuple[])"(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multiProvide(address,tuple[],address[])"(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "multiUnprovide(uint256,tuple[],address[])"(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitTask(tuple,tuple,uint256)"(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitTaskChain(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    "submitTaskCycle(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  multiCancelTasks(
    _taskReceipts: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multiCancelTasks(tuple[])"(
    _taskReceipts: {
      id: BigNumberish;
      userProxy: string;
      provider: { addr: string; module: string };
      index: BigNumberish;
      tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[];
      expiryDate: BigNumberish;
      cycleId: BigNumberish;
      submissionsLeft: BigNumberish;
    }[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multiProvide(
    _executor: string,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multiProvide(address,tuple[],address[])"(
    _executor: string,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  multiUnprovide(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "multiUnprovide(uint256,tuple[],address[])"(
    _withdrawAmount: BigNumberish,
    _taskSpecs: {
      conditions: string[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      gasPriceCeil: BigNumberish;
    }[],
    _modules: string[],
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTask(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _expiryDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitTask(tuple,tuple,uint256)"(
    _provider: { addr: string; module: string },
    _task: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    },
    _expiryDate: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTaskChain(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitTaskChain(tuple,tuple[],uint256,uint256)"(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _sumOfRequestedTaskSubmits: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  submitTaskCycle(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  "submitTaskCycle(tuple,tuple[],uint256,uint256)"(
    _provider: { addr: string; module: string },
    _tasks: {
      conditions: { inst: string; data: Arrayish }[];
      actions: {
        addr: string;
        data: Arrayish;
        operation: BigNumberish;
        dataFlow: BigNumberish;
        value: BigNumberish;
        termsOkCheck: boolean;
      }[];
      selfProviderGasLimit: BigNumberish;
      selfProviderGasPriceCeil: BigNumberish;
    }[],
    _expiryDate: BigNumberish,
    _cycles: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    multiCancelTasks(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multiCancelTasks(tuple[])"(
      _taskReceipts: {
        id: BigNumberish;
        userProxy: string;
        provider: { addr: string; module: string };
        index: BigNumberish;
        tasks: {
          conditions: { inst: string; data: Arrayish }[];
          actions: {
            addr: string;
            data: Arrayish;
            operation: BigNumberish;
            dataFlow: BigNumberish;
            value: BigNumberish;
            termsOkCheck: boolean;
          }[];
          selfProviderGasLimit: BigNumberish;
          selfProviderGasPriceCeil: BigNumberish;
        }[];
        expiryDate: BigNumberish;
        cycleId: BigNumberish;
        submissionsLeft: BigNumberish;
      }[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multiProvide(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multiProvide(address,tuple[],address[])"(
      _executor: string,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    multiUnprovide(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "multiUnprovide(uint256,tuple[],address[])"(
      _withdrawAmount: BigNumberish,
      _taskSpecs: {
        conditions: string[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        gasPriceCeil: BigNumberish;
      }[],
      _modules: string[],
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitTask(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitTask(tuple,tuple,uint256)"(
      _provider: { addr: string; module: string },
      _task: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      },
      _expiryDate: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitTaskChain(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitTaskChain(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _sumOfRequestedTaskSubmits: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    submitTaskCycle(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;

    "submitTaskCycle(tuple,tuple[],uint256,uint256)"(
      _provider: { addr: string; module: string },
      _tasks: {
        conditions: { inst: string; data: Arrayish }[];
        actions: {
          addr: string;
          data: Arrayish;
          operation: BigNumberish;
          dataFlow: BigNumberish;
          value: BigNumberish;
          termsOkCheck: boolean;
        }[];
        selfProviderGasLimit: BigNumberish;
        selfProviderGasPriceCeil: BigNumberish;
      }[],
      _expiryDate: BigNumberish,
      _cycles: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<BigNumber>;
  };
}
